#!/bin/bash

# TODO: Create action for remote storage deletion
# TODO: Create action for storage backuping
# TODO: Create action for storage restoring from backup

echo_err()
{
  local msg="$1"

  echo -e "[\e[31mERR\e[0m] $msg" 1>&2
}

echo_inf()
{
  local msg="$1"

  echo -e "[INF] $msg"
}

execute()
{
  local     cmd="$1"
  local     msg="${2:-"Execution failed"}" 
  local cleanup="$3"

  echo_inf "$cmd"
  if ! eval "$cmd"
  then
    echo_err "$msg"
    eval "$cleanup" &>/dev/null
    return 1
  fi

  return 0
}

execute_quiet()
{
  execute "$1 1>/dev/null" "$2" "$3"
}

check_executable()
{
  local executable="${1%% *}"

  echo_inf "Check if executable \"$executable\" exists"
  which "$executable" &>/dev/null || echo_err "Not found" && return 1

  return 0
}

script_name="$0"

configure()
{
  local help_cb="$1"
  
  shift

        login="${STORAGE_LOGIN:-"$(whoami)"}"
         host="${STORAGE_HOST:-"localhost"}"
   local_path="${STORAGE_LOCAL:-"/home/$login/storage"}"
  remote_path="${STORAGE_REMOTE:-"/home/$login/storage"}"

      sshfs_options="$STORAGE_SSHFS_OPTIONS"
  gocryptfs_options="$STORAGE_GOCRYPTFS_OPTIONS"

  # Try to override default parameters by passed by command line ones
  while [ $# -gt 0 ]
  do
    key="$1"
    case $key in
      --help|-h)
        eval "$help_cb"
        exit 0
        ;;
      --host)
        host="${2:-"$host"}"
        shift
        shift
        ;;
      --login)
        login="${2:-"$login"}"
        shift
        shift
        ;;
      --remote)
        remote_path="${2:-"$remote_path"}"
        shift
        shift
        ;;
      --local)
        local_path="${2:-"$local_path"}"
        shift
        shift
        ;;
      *)
        echo "Unknow option \"$key\""
        echo "Try to run with --help/-h"
        exit 1
        ;;
    esac
  done

  local_encrypted="${local_path%/}/encrypted"
  local_decrypted="${local_path%/}/decrypted"
  
  echo_inf "Using host            $host"
  echo_inf "Using login           $login"
  echo_inf "Using remote_path     $remote_path"
  echo_inf "Using local_path      $local_path"
  echo_inf "Using local_encrypted $local_encrypted"
  echo_inf "Using local_decrypted $local_decrypted"
}

main_help()
{
  echo "Client storage control script (c) s41nt0l3xus"
  echo "USAGE:"
  echo "  $script_name ACTION [OPTION, [OPTION ...]]"
  echo "ACTION:"
  echo "  h, help           - Print this help message"
  echo "  m, mount          - Mount storage"
  echo "  u, umount         - Unmount storage" 
  echo "  s, status         - Status of storage"
  echo "  c, create         - Create storage"
  echo "  d, delete         - Delete storage"   # TODO
  echo "  b, backup         - Backup storage"   # TODO
  echo "  r, restore        - Restore storage"  # TODO
  echo "OPTION:"
  echo "  $script_name ACTION --help|-h"
}

status_help()
{
  echo "Use it to check if remote enrypted storage is mounted"
  echo "USAGE:"
  echo "  $script_name s[tatus] [OPTION, [OPTION ...]]"
  echo "OPTION:"
  echo "  --help, -h        - Print this help message                |"
  echo "  --local <path>    - Path to the storage on the local host  | Default: $local_path"
  echo "REQUIREMENTS:"
  echo "  df                - List mounted directories"
  echo "  grep              - Find required directories"
}

mount_help()
{
  echo "Use it to mount remote enrypted storage and decrypt it"
  echo "USAGE:"
  echo "  $script_name m[ount] [OPTION, [OPTION ...]]"
  echo "OPTION:"
  echo "  --help, -h        - Print this help message                |"
  echo "  --host <host>     - Specify remote host with the storage   | Default: $host"
  echo "  --login <login>   - Specify login on the remote host       | Default: $login"
  echo "  --remote <path>   - Path to the storage on the remote host | Default: $remote_path"
  echo "  --local <path>    - Path to the storage on the local host  | Default: $local_path"
  echo "REQUIREMENTS"
  echo "  sshfs             - Mount remote storage via SSH"
  echo "  gocryptfs         - Encrypt decrypted storage"  
  echo "  mkdir             - Create directories"
}

umount_help()
{
  echo "Use it to unmount remote enrypted storage"
  echo "USAGE:"
  echo "  $script_name u[mount] [OPTION, [OPTION ...]]"
  echo "OPTION:"
  echo "  --help, -h        - Print this help message                |"
  echo "  --local <path>    - Path to the storage on the local host  | Default: $local_path"
  echo "REQUIREMENTS:"
  echo "  rmdir             - Remove empty directories"
  echo "  fusermount        - Unmount storages"
}

create_help()
{
  echo "Use it to create remote enrypted storage"
  echo "USAGE:"
  echo "  $script_name c[reate] [OPTION, [OPTION ...]]"
  echo "OPTION:"
  echo "  --help, -h        - Print this help message                |"
  echo "  --host <host>     - Specify remote host with the storage   | Default: $host"
  echo "  --login <login>   - Specify login on the remote host       | Default: $login"
  echo "  --remote <path>   - Path to the storage on the remote host | Default: $remote_path"
  echo "local REQUIREMENTS"
  echo "  ssh               - Execute remote commands"
  echo "remote REQUIREMENTS"
  echo "  gocryptfs         - Set up encrypted storage"
}

# Cleanup function to avoid partial result of execution
cleanup()
{
  fusermount -u "$local_decrypted" &>/dev/null
  fusermount -u "$local_encrypted" &>/dev/null
  rmdir "$local_decrypted" &>/dev/null
  rmdir "$local_encrypted" &>/dev/null
  rmdir "$local_path"      &>/dev/null
}

# Get status for local storage
status_()
{
  check_executable "df"
  check_executable "grep"

  configure "status_help" $@

  local status="\e[32mMOUNTED\e[0m"

  if ! $(df -h | grep "$local_encrypted" &>/dev/null)
  then
    echo_inf "Remote storage is not mounted"
    status="\e[31mUNMOUNTED\e0m"
  fi

  if ! $(df -h | grep "$local_decrypted" &>/dev/null)
  then
    echo_inf "Decrypted storage is not mounted"
    status="\e[31mUNMOUNTED\e[0m"
  fi

  echo_inf "$status"
}

mount()
{
  # Check requirements
  check_executable "sshfs"
  check_executable "gocryptfs"

  configure "mount_help" $@

  # Main script logic

  # Do cleanup to clean previous errors
  cleanup

  # Create directory for encrypted storage
  execute_quiet 'mkdir -p $local_encrypted'                                 \
                "Failed to create directory"                                \
                "cleanup" || exit 1

  # Mount encrypted storage from remote host using $login@$host:$remote_path
  execute 'sshfs $login@$host:$remote_path $local_encrypted $sshfs_options' \
          "Failed to mount remote"                                          \
          "cleanup" || exit 1

  # Create directory for decrypted storage
  execute_quiet 'mkdir -p $local_decrypted'                                 \
                "Failed to create directory"                                \
                "cleanup" || exit 1

  execute 'gocryptfs $gocryptfs_options $local_encrypted $local_decrypted'  \
          "Failed to decrypt"                                               \
          "cleanup" || exit 1
  
  echo_inf "\e[32mSUCCESS\e[0m"
}

umount()
{
  check_executable "fusermount"
  check_executable "rmdir"

  configure umount_help $@

  execute_quiet 'fusermount -u "$local_decrypted"'                   \
                "Failed to unmount"                                  \
                "cleanup" || exit 1

  execute_quiet 'fusermount -u "$local_encrypted"'                   \
                "Failed to unmount"                                  \
                "cleanup" || exit 1

  execute_quiet 'rmdir "$local_decrypted"'                           \
                "Failed to remove directory"                         \
                "cleanup" || exit 1

  execute_quiet 'rmdir "$local_encrypted"'                           \
                "Failed to remove directory"                         \
                "cleanup" || exit 1

  execute_quiet 'rmdir "$local_path"'                                \
                "Failed to remove directory"                         \
                "cleanup" || exit 1

  echo_inf "\e[32mSUCCESS\e[0m"
}

create()
{
  # TODO: Add overwrite option

  local create_cleanup='ssh $login@$host "rmdir \"$remote_path\"" &>/dev/null'

  check_executable "ssh"

  configure create_help $@
  
  execute 'ssh "$login@$host" "which gocryptfs &>/dev/null"'          \
          "Failed to find gocryptfs"   || exit 1

  echo_inf "Check if storage can be created"

  if ssh "$login@$host" "gocryptfs -info \"$remote_path\"" &>/dev/null
  then
    echo_err "Remote encrypted storage exists"
    exit 1
  fi
  
  if ssh "$login@$host" "[ -d \"$remote_path\"] || [ -f \"$remote_path\"]" &>/dev/null
  then
    echo_err "Remote path exists"
    exit 1
  fi

  execute 'ssh "$login@$host"  "mkdir -p $remote_path &>/dev/null"'   \
          "Failed to create directory" || exit 1 

  execute 'ssh "$login@$host"  "gocryptfs -init $remote_path"'        \
          "Failed to create directory"                                \
          "$create_cleanup"            || exit 1     

  echo_inf "\e[32mSUCCESS\e[0m"
}

delete()
{
  echo_err "Action is not implemented"

  # TODO

  exit 1
}

backup()
{
  echo_err "Action is not implemented"

  # TODO
  
  exit 1
}

restore()
{
  echo_err "Action in not implemented"

  # TODO

  exit 1
}

main()
{
  if [ $# -eq 0 ]
  then
    main_help
    exit 0
  fi

  case $1 in
    h|help)
      main_help
      exit 0
      ;;
    m|mount)
      shift
      mount $@
      ;;
    u|umount)
      shift 
      umount $@
      ;;
    s|status)
      shift
      status_ $@
      ;;
    c|create)
      shift
      create $@
      ;;
    d|delete)
      shift
      delete $@
      ;;
    b|backup)
      shift
      backup $@
      ;; 
    r|restore)
      shift
      restore $@
      ;;
    *)
      echo "Bad action \"$1\""
      echo "Try to run:"
      echo "  $0 h"
      echo "or:"
      echo "  $0 help"

      exit 1
      ;;
  esac
}

main $@

# vim: set ft=bash
